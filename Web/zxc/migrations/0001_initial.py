# Generated by Django 4.2 on 2025-03-25 08:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField()),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DurationCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.IntegerField(help_text='Введите длительность курса', verbose_name='Длительность курса')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя преподавателя', max_length=100, verbose_name='Имя преподавателя')),
                ('middle_name', models.CharField(help_text='Введите фамилию преподавателя', max_length=100, verbose_name='Фамилия преподавателя')),
                ('last_name', models.CharField(help_text='Введите отчество преподавателя', max_length=100, verbose_name='Отчество преподавателя')),
                ('specialization', models.CharField(help_text='Введите специальность преподавателя', max_length=200, verbose_name='Специальность преподавателя')),
                ('description', models.TextField(help_text='Введите проекты и языки программирования, которые знает преподаватель', verbose_name='Описание карьеры')),
                ('experience', models.IntegerField(help_text='Введите стаж работы преподавателя в IT-сфере', verbose_name='Стаж работы')),
                ('photo', models.ImageField(blank=True, help_text='Введите фото преподавателя', null=True, upload_to='images', verbose_name='Фото преподавателя')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Введите название курса', max_length=200, verbose_name='Название курса')),
                ('categorycourse', models.CharField(choices=[('programming', 'Программирование'), ('english', 'Английский язык'), ('game', 'Игры'), ('music_and_cinema', 'Кино и музыка')], default='programming', max_length=50)),
                ('description', models.TextField(help_text='Введите описание курса', verbose_name='Описание курса')),
                ('price', models.DecimalField(decimal_places=2, help_text='Введите стоимость курса', max_digits=7, verbose_name='Стоимость курса')),
                ('photo', models.ImageField(help_text='Введите обложку курса', upload_to='course_photos/', verbose_name='Обложка курса')),
                ('duration', models.ForeignKey(help_text='Введите длительность курса', on_delete=django.db.models.deletion.CASCADE, to='zxc.durationcourse', verbose_name='Длительность курса')),
                ('student', models.ForeignKey(blank=True, help_text='Выберите студента курса', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student', to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
                ('teacher', models.ManyToManyField(help_text='Выберите преподавателя (преподавателей) для курса', to='zxc.teacher', verbose_name='Преподаватель (преподаватели) курса')),
            ],
        ),
    ]
